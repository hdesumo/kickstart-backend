// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

///////////////////////////////////////////////////////////////
//                        MODELS                             //
///////////////////////////////////////////////////////////////

// --- Cours et apprentissage ---
model Course {
  id         Int      @id @default(autoincrement())
  externalId String?  @unique
  title      String
  content    String?
  url        String?
  source     String? // ex: "coursera"
  level      String?
  campus     String?
  fileUrl    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  quizzes Quiz[]
}

// --- Quizzes liés aux cours ---
model Quiz {
  id        Int      @id @default(autoincrement())
  title     String
  courseId  Int?
  course    Course?  @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions QuizQuestion[]
}

model QuizQuestion {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Tiers d'abonnement / monétisation ---
model MembershipTier {
  id            Int      @id @default(autoincrement())
  kind          String
  minMonthlyUsd Int
  currency      String
  benefits      String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// --- Notifications système ---
model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Support / Centre d’assistance ---
model SupportRequest {
  id Int @id @default(autoincrement())

  // Interne (utilisateur connecté)
  userId Int?
  // Pas encore de relation "User" car pas de modèle User défini.
  // On pourra l'ajouter plus tard : user User? @relation(fields: [userId], references: [id])

  // Public (visiteur)
  name  String?
  email String?

  // Détails du ticket
  subject   String
  message   String
  status    String   @default("open")
  type      String // "internal" ou "public"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
